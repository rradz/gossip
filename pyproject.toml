[build-system]
requires = ["setuptools>=70.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gossip-graph"
version = "0.1.0"
description = "Fast graph isomorphism testing using gossip fingerprinting algorithm"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["graph", "isomorphism", "algorithm", "networkx"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Mathematics",
]

dependencies = [
    "networkx>=3.3",
    "numpy>=2.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-timeout>=2.3.1",
    "black>=24.8.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.11.1",
    "pylint>=3.2.6",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.3",
    "ipython>=8.26.0",
    "ipdb>=0.13.13",
]
docs = [
    "sphinx>=7.4.7",
    "sphinx-rtd-theme>=2.0.0",
]

[project.scripts]
gossip = "gossip.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
gossip = ["py.typed"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src/gossip",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--timeout=30",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["src/gossip"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
ignore_errors = true

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
strict_equality = true

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Protected access
]

[tool.pylint.format]
max-line-length = 100

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]
